C51 COMPILER V9.56.0.0   ______                                                            12/17/2017 22:06:08 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ______
OBJECT MODULE PLACED IN .\Objects\电子琴.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE 电子琴.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\电
                    -子琴.lst) TABS(2) OBJECT(.\Objects\电子琴.obj)

line level    source

   1          /**************************************************************
   2          程序名称：模拟电子琴
   3          **************************************************************/ 
   4          #include<reg52.h>           //定义头文件
   5          #define uchar unsigned char     //宏定义
   6          #define uint unsigned int     //宏定义
   7          #define led P0          //定义LED等位P0口
   8          #define sw_port P1        //中间变量。。。使按键和led对应
   9          sbit buzzer=P2^7;       //扬声器管脚
  10          sbit key1=P3^2;         //播放音乐与弹奏歌曲转换
  11          sbit key3=P3^4;         //掉电存储按键
  12          sbit key4=P3^5;                 //播放掉电存储的歌曲                                         
  13          sbit keybofang=P3^3;      //播放刚才弹奏的歌曲
  14          sbit key7=P3^0;         //音调键。。。 和  歌曲键
  15          sbit key8=P3^1;         //音调键。。。 和  歌曲键
  16          sbit key6=P1^7;
  17          sbit key5=P1^6;           
  18          sbit sda=P1^1;                //24c02数据线  
  19          sbit scl=P1^0;          //24c02时钟线
  20          uchar keyd,i,keys,b;          //定义变量
  21          uchar tone_H;         //定义变量
  22          uchar tone_L;         //定义变量
  23          void beat_125(unsigned char);     //声明函数
  24          uchar code beat1[]={16,8,8,8,8,4,4,16,8,4,4,8,4,4,4,  //歌曲1节拍 
  25          4,4,4,16,16,8,8,4,4,12,8,16,16,8,4,4,4,4,16};
  26          uchar code song1[]={6,5,3,5,7,6,5,6,3,5,6,5,3,    //歌曲1简谱
  27          2,1,6,5,3,2,2,3,5,5,6,3,2,1,5,3,2,1,6,1,1,15};
  28          
  29          uchar code beat2[]={7,7,7, 7,8,9, 1,2,3, 6,2,4, 4,4,4, 12,  //歌曲二节拍
  30          8,2,2, 4,4,4, 8,2,2, 4,4,4, 2,2,4,4, 12,};
  31          uchar code song2[]={1,2,8, 8,5,1, 3,3,3, 5,4,3,   //歌曲二简谱
  32           5,4,3, 2, 2,1,0, 1,2,3, 4,3,2, 3,4,5, 5,4,3, 2,1,15};
  33          
  34          uchar code beat4[]={4,4,4, 6,2,4, 4,4,4, 6,2,4, 4,4,4, 12, 
  35          8,2,2, 4,4,4, 8,2,2, 4,4,4, 2,2,4,4, 12,};
  36          uchar code song4[]={1,1,1, 3,2,1, 3,3,3, 5,4,3,
  37           5,4,3, 2, 2,1,0, 1,2,3, 4,3,2, 3,4,5, 5,4,3, 2,1, 15};
  38          
  39          uchar code tone[]={115,102,91,86,77,68,61,57};    //歌曲音调
  40          unsigned int code tone1[]={1012,956,852,759,716,638,568,506,478,426,379,531,10}; //歌曲音调
  41          uchar song3[43];                //定义空数组
  42          void play(uchar*,uchar*);         //演奏歌曲函数
  43          void delay8um(uchar);           //第一8um延时函数
  44          void sound(uchar);          //弹奏发声函数
  45          /*******************************************
  46          函数功能：节拍的延时的基本单位，用于24c08简单延时
  47          ******************************************/          
  48          void delay()            //简单延时函数
  49          {;;}
  50          /*******************************************
  51          函数功能：节拍的延时的基本单位，延时1ms
  52          ******************************************/
  53          void delay1ms(uchar x)            //1um延时函数
  54          {
C51 COMPILER V9.56.0.0   ______                                                            12/17/2017 22:06:08 PAGE 2   

  55   1        uchar j;
  56   1        while(x--)
  57   1          for(j=120;j>0;j--);
  58   1      }
  59          /**************************************************************
  60          函数功能：24c02驱动程序      用IIC总线进行传输
  61          **************************************************************/ 
  62          void init_c02()           //24c02初始化
  63          {
  64   1        sda=1;
  65   1        delay();
  66   1        scl=1;
  67   1        delay();
  68   1      }
  69          void start_c02()                    //24c02的启动信号
  70          {
  71   1        scl=1;
  72   1        delay();    
  73   1        sda=1;   
  74   1        delay();
  75   1        sda=0;
  76   1        delay();
  77   1      
  78   1      }
  79          void stop_c02()             //24c02停止信号
  80          {
  81   1        sda=0;
  82   1        delay();
  83   1        scl=1;
  84   1        delay();
  85   1        sda=1;
  86   1        delay();
  87   1      }
  88          void response_c02()         //24c02的应答信号
  89          {
  90   1        uchar i;
  91   1        scl=1;
  92   1        delay();
  93   1        while((sda==1)&&(i<250))i++;
  94   1        scl=0;
  95   1        delay();
  96   1      }
  97          void write_c02byte(uchar date)            //对24c02写一个字节
  98          {
  99   1        uchar i,temp;
 100   1        temp=date;
 101   1        for(i=0;i<8;i++)
 102   1        { 
 103   2          temp=temp<<1;
 104   2          scl=0;
 105   2          delay();
 106   2          sda=CY;
 107   2          delay();
 108   2          scl=1;
 109   2          delay();
 110   2        }
 111   1        scl=0;
 112   1        delay();
 113   1        sda=1;
 114   1        delay();
 115   1      }
 116          uchar read_c02byte()          //对24c02读一个字节
C51 COMPILER V9.56.0.0   ______                                                            12/17/2017 22:06:08 PAGE 3   

 117          {
 118   1         uchar i,k;
 119   1         scl=0;
 120   1         delay();
 121   1         sda=1;
 122   1         delay();
 123   1         for(i=0;i<8;i++)
 124   1         {
 125   2          scl=1;
 126   2          delay();
 127   2          k=(k<<1)|sda;
 128   2          scl=0;
 129   2          delay();
 130   2        }
 131   1        return k;
 132   1      }
 133          void write_addc02(uchar address,uchar date)   //对24c02写一个数据 
 134          {
 135   1        start_c02();
 136   1        write_c02byte(0xa0);
 137   1        response_c02();
 138   1        write_c02byte(address);
 139   1        response_c02();
 140   1        write_c02byte(date);
 141   1        response_c02();
 142   1        stop_c02();
 143   1      }
 144          uchar read_addc02(uchar address)      //从24c02读一个数据
 145          {
 146   1        uchar date;
 147   1        start_c02();
 148   1        write_c02byte(0xa0);
 149   1        response_c02();
 150   1        write_c02byte(address);
 151   1        response_c02();
 152   1        start_c02();  
 153   1        write_c02byte(0xa1);
 154   1        response_c02();
 155   1        date=read_c02byte();
 156   1      //  response_c02;
 157   1        stop_c02();
 158   1        return date;
 159   1      }
 160          /**************************************************************
 161          函数功能：主函数。。。。。。。。。。。。
 162          **************************************************************/  
 163          void main()           //主函数
 164          { 
 165   1        uchar yd,temp,jj,tt;        //定义变量
 166   1        uchar t1,i;         //定义变量
 167   1        t1=0;           //初始化 t1
 168   1        yd=0;                     //初始化t2
 169   1        buzzer=1;           //初始化蜂鸣器
 170   1        EA=1;           //打开定时总中断
 171   1        TMOD=0x01;          //设置定时器模式  定时器0工作在方式1  
 172   1        ET0=1;            //打开定时器0中断
 173   1        while(1)          //主循环
 174   1        {
 175   2          led=0x3c;
 176   2          sw_port=0xff;
 177   2          keys=~sw_port;        //将led与按键结合起来
 178   2          switch(keys)        //进入键盘选择
C51 COMPILER V9.56.0.0   ______                                                            12/17/2017 22:06:08 PAGE 4   

 179   2          {
 180   3            case 0x04:sound(0);temp=1;yd=0;break;  //如果键盘1被按下发音do，同时设置标志temp，将数字计入yd
 181   3            case 0x08:sound(1);temp=1;yd=1;break;  //如果键盘2被按下发音ruai，同时设置标志temp，将数字计入yd
 182   3            case 0x10:sound(2);temp=1;yd=2;break;  //如果键盘3被按下发音mi，同时设置标志temp，将数字计入yd
 183   3            case 0x20:sound(3);temp=1;yd=3;break;  //如果键盘4被按下发音fa，同时设置标志temp，将数字计入yd
 184   3      
 185   3          }
 186   2          if(key5==0)       //如果键盘5被按下发音la，同时设置标志temp，将数字计入yd
 187   2          {
 188   3              while(!key5)    // 松手检测
 189   3              sound(4);
 190   3              temp=1;yd=4;  
 191   3          }
 192   2          if(key6==0)       //如果键盘6被按下发音xi，同时设置标志temp，将数字计入yd
 193   2          {
 194   3              while(!key6)    // 松手检测
 195   3              sound(5);
 196   3              temp=1;yd=5;  
 197   3          }
 198   2          if(key7==0)       //如果键盘7被按下发音xi，同时设置标志temp，将数字计入yd
 199   2          {
 200   3              while(!key7)    // 松手检测
 201   3              sound(6);
 202   3              temp=1;yd=6;  
 203   3          }
 204   2          if(key8==0)       //如果键盘8被按下发音高音do，同时设置标志temp，将数字计入yd
 205   2          {
 206   3              while(!key8)    //松手检测
 207   3              sound(7);   //播放高音do。。
 208   3              temp=1;yd=7;
 209   3          }
 210   2          if(temp==1)       //标志位，如果标志位为1，则说明有按键被按下
 211   2          {
 212   3            
 213   3            temp=0;       //将标识位归零
 214   3            song3[t1++]=yd;   //将数据存入song3[]数组
 215   3          }
 216   2      
 217   2          if(key3==0)       //将数据存入24c02 ，掉电存储按键
 218   2          {
 219   3            delay1ms(10);
 220   3            if(key3==0)     //检测是否key3被按下
 221   3            { 
 222   4              P0=0;     //如果被按下，将led打开
 223   4              while(!key3);   //松手检测
 224   4              song3[t1++]=30; 
 225   4              init_c02();   //初始化24c02
 226   4                for(i=0;i<40;)  //进入循环
 227   4                {
 228   5                   write_addc02(i,song3[i++]);  //将数据依次写入24c02
 229   5                   delay1ms(10);      //延时
 230   5                }
 231   4                  P0=1;           //led关闭
 232   4            }
 233   3          }
 234   2          if(key4==0)       //读取24c02中的数据，掉电播放
 235   2          {
 236   3            delay1ms(10);
 237   3            if(key4==0)
 238   3            {       //检测是否有键被按下
 239   4              
 240   4              while(!key4);   //松手检测
C51 COMPILER V9.56.0.0   ______                                                            12/17/2017 22:06:08 PAGE 5   

 241   4              init_c02();     //初始化
 242   4              P0=0;     //将led打开         
 243   4              tt=1;     //将tt初值设为0
 244   4              while(read_addc02(tt)!=30)      //进入while循环
 245   4              {
 246   5                jj=read_addc02(tt++);
 247   5                tone_H=(65536-tone1[jj])/256;   //设定初值
 248   5                tone_L=(65536-tone1[jj])%256;   //设定初值         
 249   5                   TH0=tone_H;        //赋值TH0高八位
 250   5                 TL0=tone_L;        //赋值TL0低八位
 251   5                 TR0=1;             //打开定时器
 252   5                 beat_125(3);       //延时
 253   5                 TR0=0;
 254   5                 beat_125(4);       //关闭定时器
 255   5              }
 256   4              P0=1;           //关闭led
 257   4                  }
 258   3          }
 259   2      
 260   2          if(keybofang==0)
 261   2          {
 262   3            while(!keybofang);          //检测回放键是否被按下
 263   3            song3[t1++]=30;
 264   3             // t1=0;
 265   3            while(song3[i]!=30)         //进入while循环。
 266   3            {
 267   4               tone_H=(65536-tone1[song3[i]])/256;
 268   4               tone_L=(65536-tone1[song3[i]])%256;
 269   4               TH0=tone_H;
 270   4               TL0=tone_L;
 271   4               TR0=1;           //开启定时器
 272   4                 beat_125(3);                          
 273   4               TR0=0;           //关闭定时器
 274   4               i++;
 275   4               beat_125(4);         //将i值加一             
 276   4              }                         
 277   3          }
 278   2          if(key1==0)
 279   2          {
 280   3            delay1ms(10);
 281   3            if(key1==0)           //检测key1是否被按下
 282   3            { 
 283   4              while(!key1);
 284   4              P0=0;           //关闭led
 285   4              while(key1)         //进入循环
 286   4              {   
 287   5                 if(key7==0)            //检测key7是否被按下
 288   5                {
 289   6                  delay1ms(10);
 290   6                  if(key7==0)
 291   6                  {
 292   7                    P0=0xaa;    //设置led灯亮个数
 293   7                    while(!key7);   //等待释放
 294   7                    play(song1,beat1);  //演奏歌曲1
 295   7                    P0=0xff;    //关闭led
 296   7                  }
 297   6                }
 298   5                if(key8==0)       //检测是否key8键被按下
 299   5                {
 300   6                  delay1ms(10);
 301   6                  if(key8==0)
 302   6                  {
C51 COMPILER V9.56.0.0   ______                                                            12/17/2017 22:06:08 PAGE 6   

 303   7                    P0=0xaa;    //设置led灯亮
 304   7                    while(!key8);   //松手检测
 305   7                    play(song2,beat2);  //播放歌曲2
 306   7                    P0=0xff;    //关闭led
 307   7                  }     
 308   6                }
 309   5                if(key6==0)       //检测是否key6键被按下
 310   5                {
 311   6                  delay1ms(10);
 312   6                  if(key6==0)
 313   6                  {
 314   7                    P0=0xaa;    //设置led灯亮
 315   7                    while(!key6);   //松手检测
 316   7                    play(song4,beat4);  //播放歌曲4
 317   7                    P0=0xff;    //关闭led
 318   7                  }     
 319   6                }  
 320   5              }
 321   4                while(!key1);       //检测key1是否被按下
 322   4                P0=1;         //如果被按下。退出该函数。。并关闭led
 323   4              
 324   4            }
 325   3          }
 326   2        
 327   2        }
 328   1      }
 329          /**************************************************************
 330          函数功能：从数组中播放歌曲
 331          **************************************************************/ 
 332          void play(uchar*song,uchar*beat)      //播放歌曲函数
 333          {
 334   1         i=0;           //设置初始值
 335   1         while(song[i]!=15)       //  进入循环函数
 336   1         {
 337   2           tone_H=(65536-tone1[song[i]])/256; //定义初值
 338   2           tone_L=(65536-tone1[song[i]])%256; //定义初值
 339   2           TH0=tone_H;        //赋值
 340   2           TL0=tone_L;        //赋值
 341   2           TR0=1;         //打开定时器0
 342   2           beat_125(beat[i]);     //读取节拍函数
 343   2           i++;         //自加 
 344   2           TR0=0;         //关闭led
 345   2         }
 346   1      }
 347          /**************************************************************
 348          函数功能：定时器T0的中断服务子程序，使P2.7引脚输出音频方波
 349          **************************************************************/ 
 350          void tone_timer() interrupt 1       //中断子程序
 351          {
 352   1         TH0=tone_H;
 353   1         TL0=tone_L;
 354   1         buzzer=~buzzer;        //扬声器开关控制
 355   1      }
 356          /**************************************************************
 357          函数功能：产生节拍的函数
 358          **************************************************************/ 
 359          void beat_125(uchar x)          //节拍。。
 360          {
 361   1        uchar i,j,k;          //125ms延时函数。。
 362   1        for(i=0;i<x;i++)
 363   1          for(j=0;j<125;j++)
 364   1            for(k=0;k<120;k++);
C51 COMPILER V9.56.0.0   ______                                                            12/17/2017 22:06:08 PAGE 7   

 365   1      }
 366          /**************************************************************
 367          函数功能：8um简易延时
 368          **************************************************************/ 
 369          void delay8um(uchar x)          //8ms延时函数
 370          {
 371   1        uchar i,j;
 372   1        for(i=0;i<x;i++)
 373   1          for(j=0;j<1;j++);
 374   1      }
 375          /**************************************************************
 376          函数功能：产生音调
 377          **************************************************************/ 
 378          void sound(uchar x)         //音调函数
 379          {
 380   1        uchar i;
 381   1        led=sw_port;          //定义led
 382   1        for(i=0;i<255;i++)
 383   1        {
 384   2          buzzer=0;delay8um(tone[x]);   //开关频率。。从而产生节拍
 385   2          buzzer=1;delay8um(tone[x]);
 386   2        }
 387   1        led=0xff;
 388   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1134    ----
   CONSTANT SIZE    =    237    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     49      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
